# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    outputs:
      foo1-output: ${{ steps.generate-output.outputs.bar-output }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Inicia script 
        run: echo Ola Oracle!

      - name: 'Cria o arquivo de configuracao com base no OCI'
        run: |
          mkdir ~/.oci
          echo "${{secrets.CONFIG}}" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.ID_RSA}}" >> ~/.oci/id_rsa.pub

      - name: 'Instalar OCI CLI'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL

      - name: 'Corrigir permissoes de arquivos criados'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Criar uma instancia'
        id: instancia
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          INSTANCE=$(oci compute instance launch --ssh-authorized-keys-file ~/.oci/id_rsa.pub --availability-domain "AHhM:US-ASHBURN-AD-1" --compartment-id ${{secrets.OCI_COMPARTMENT_ID}} --shape "VM.Standard.E2.1" --display-name "app_server" --image-id ocid1.image.oc1.iad.aaaaaaaatwjeakck3drug6mmutcz3msodjse56qxdtwnvehldu7yds66r2wq --subnet-id ${{secrets.OCI_SUBNET_ID}} --wait-for-state RUNNING)
          INSTANCE_ID=$(echo $INSTANCE | jq -r '.data.id')
          echo $INSTANCE_ID

          IP=$(oci compute instance list-vnics --instance-id $INSTANCE_ID --query 'data [0]."public-ip"' --raw-output)
          echo "::set-output name=IP::$(echo "$IP")"

      - name: Check IP
        run: |
          echo "O IP criado com sucesso foi ${{ steps.instancia.outputs.IP }}"
          
      - name: 'Validar o acesso via SSH'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          while ! nc -w5 -z ${{ steps.instancia.outputs.IP }} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"
      
      - name: 'Testar Comando SSH'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.instancia.outputs.IP }}
          username: opc
          key: ${{ secrets.ID_RSA_PRIV}} 
          port: 22
          script: whoami

      - name: 'Deploy do projeto'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.instancia.outputs.IP }}
          username: opc
          key: ${{ secrets.ID_RSA_PRIV}} 
          port: 22
          command_timeout: 300m
          script: |
           git config --global user.name "Fernando"
           git config --global user.email fdacosta1978@gmail.com
           git clone -b master https://${{ secrets.GIT_USER}}:${{ secrets.GIT_SECRET}}@${{ secrets.GIT_CLONE_URL}} ${{ secrets.PROJECT_NAME}}
           cd ${{ secrets.PROJECT_NAME}}
           cat <<EOF > config/database.yml
           production:
             adapter: postgresql
             encoding: unicode
             database: ${{ secrets.DB_PREFIX}}_production
             pool: 5
             username: ${{ secrets.DB_USER}}
             password: ${{ secrets.DB_PASSWORD}} 
             host: ${{ secrets.DB_HOST}}
             port: ${{ secrets.DB_PORT}}
           development:
             adapter: postgresql
             encoding: unicode
             database: ${{ secrets.DB_PREFIX}}_development
             pool: 5
             username: ${{ secrets.DB_USER}}
             password: ${{ secrets.DB_PASSWORD}} 
             host: ${{ secrets.DB_HOST}}
             port: ${{ secrets.DB_PORT}}
           test:
             adapter: postgresql
             encoding: unicode
             database: ${{ secrets.DB_PREFIX}}_test
             pool: 5
             username: ${{ secrets.DB_USER}}
             password: ${{ secrets.DB_PASSWORD}} 
             host: ${{ secrets.DB_HOST}}
             port: ${{ secrets.DB_PORT}}
           EOF
          
      - name: 'Configuracao do Servico'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.instancia.outputs.IP }}
          username: opc
          key: ${{ secrets.ID_RSA_PRIV}} 
          port: 22
          command_timeout: 300m
          script: |
           cd ${{ secrets.PROJECT_NAME}}/config
           mkdir puma
           cd puma
           cat <<EOF > development.rb
           rails_env = "development"
           environment rails_env
           app_dir = "/home/opc/${{ secrets.PROJECT_NAME}}" # Update me with your root rails app path
           #bind  "unix://#{app_dir}/puma.sock"
           bind "tcp://0.0.0.0:3000"
           pidfile "#{app_dir}/puma.pid"
           state_path "#{app_dir}/puma.state"
           directory "#{app_dir}/"

           stdout_redirect "#{app_dir}/log/puma.stdout.log", "#{app_dir}/log/puma.stderr.log", true

           workers 2
           threads 1,2

           activate_control_app "unix://#{app_dir}/pumactl.sock"

           prune_bundler
           EOF
           cat <<EOF > production.rb
           rails_env = "production"
           environment rails_env
           app_dir = "/home/opc/${{ secrets.PROJECT_NAME}}" # Update me with your root rails app path
           #bind  "unix://#{app_dir}/puma.sock"
           bind "tcp://0.0.0.0:3000"
           pidfile "#{app_dir}/puma.pid"
           state_path "#{app_dir}/puma.state"
           directory "#{app_dir}/"

           stdout_redirect "#{app_dir}/log/puma.stdout.log", "#{app_dir}/log/puma.stderr.log", true

           workers 2
           threads 1,2

           activate_control_app "unix://#{app_dir}/pumactl.sock"

           prune_bundler
           EOF
           cd /etc/systemd/system/
           sudo cat <<EOF > puma.service
           [Unit]
           Description=Puma HTTP Server
           After=network.target

           [Service]
           Type=simple
           WorkingDirectory=/home/opc/${{ secrets.PROJECT_NAME}}
           Environment=RAILS_ENV=development
           User=opc

           ExecStart=/usr/local/bin/puma -C /home/opc/${{ secrets.PROJECT_NAME}}/config/puma/development.rb
           Restart=always
           KillMode=process

           [Install]
           WantedBy=multi-user.target
           EOF
           sudo chmod 644 puma.service
